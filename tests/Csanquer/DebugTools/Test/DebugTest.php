<?php
namespace Csanquer\DebugTools\Test;

use Csanquer\DebugTools\Output\OutputInterface;
use Csanquer\DebugTools\Output\OutputFactory;
use Csanquer\DebugTools\Debug;

/**s
 * Generated by PHPUnit_SkeletonGenerator on 2012-04-09 at 12:10:52.
 */
class DebugTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Csanquer\DebugTools\Debug
     */
    protected $debug;

    /**
     * @var resource
     */
    protected $file;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->debug = new Debug();
        $this->file = fopen(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'fixtures'.DIRECTORY_SEPARATOR.'test.txt', 'r');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
         fclose($this->file);
    }

    /**
     * @dataProvider getSetDefaultMaxDepthProvider
     * @covers Csanquer\DebugTools\Debug::getDefaultMaxDepth
     * @covers Csanquer\DebugTools\Debug::setDefaultMaxDepth
     */
    public function testGetSetDefaultMaxDepth($value, $expected)
    {
        $this->assertEquals(4,$this->debug->getDefaultMaxDepth());
        $this->assertInstanceOf('Csanquer\DebugTools\Debug', $this->debug->setDefaultMaxDepth($value));
        $this->assertEquals($expected, $this->debug->getDefaultMaxDepth());
    }
    
    public function getSetDefaultMaxDepthProvider()
    {
        return array(
            array(null, 0),
            array('foobar', 0),
            array(2, 2),
        );
    }

    /**
     * @dataProvider getSetDefaultModeProvider
     * @covers Csanquer\DebugTools\Debug::getDefaultMode
     * @covers Csanquer\DebugTools\Debug::setDefaultMode
     */
    public function testGetSetDefaultMode($value, $expected)
    {
        $this->assertEquals(OutputFactory::MODE_CLI, $this->debug->getDefaultMode());
        $this->assertInstanceOf('Csanquer\DebugTools\Debug', $this->debug->setDefaultMode($value));
        $this->assertEquals($expected, $this->debug->getDefaultMode());
    }
    
    public function getSetDefaultModeProvider()
    {
        return array(
            array(null, OutputFactory::MODE_CLI),
            array(OutputFactory::MODE_CLI, OutputFactory::MODE_CLI),
            array(OutputFactory::MODE_COLOR_CLI, OutputFactory::MODE_COLOR_CLI),
            array(OutputFactory::MODE_HTML, OutputFactory::MODE_HTML),
            array(OutputFactory::MODE_NO_FORMAT, OutputFactory::MODE_NO_FORMAT),
        );
    }

    /**
     * @dataProvider asStringProvider
     * @covers Csanquer\DebugTools\Debug::asString
     */
    public function testAsString($value, $expectedEquals, $expectedNotEquals)
    {
        $result = $this->debug->asString($value);
        $this->assertInternalType('string', $result);
        $this->assertEquals($expectedEquals, $result);
        if (is_string($expectedNotEquals))
        {
            $this->assertNotEquals($expectedNotEquals, $result);
        }
    }
    
    public function asStringProvider()
    {
        return array(
            array(null, 'NULL', 'null'),
            array(5, '5', null),
            array(3.02, '3.02', null),
            array(false, 'FALSE', 'false'),
            array(true, 'TRUE', 'true'),
            array('a string', 'a string', 'A string'),
            array(new WithoutToString(), 'Object Csanquer\DebugTools\Test\WithoutToString', null),
            array(new WithToString(), 'this class has __toString method', 'Object Csanquer\DebugTools\Test\WithToString'),
            array(array('a', 1 , 'b' => 'test', array( 0 => 'b')), 'Array', null),
        );
    }
        
    /**
     * @covers Csanquer\DebugTools\Debug::asString
     */
    public function testAsStringFile()
    {
        $result = $this->debug->asString($this->file);
        $this->assertInternalType('string', $result);
        $this->assertEquals('stream', $result);
    }
    
    /**
     * @covers Csanquer\DebugTools\Debug::var_export
     * @todo   Implement testVar_export().
     */
    public function testVar_export()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::print_r
     * @todo   Implement testPrint_r().
     */
    public function testPrint_r()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::var_dump
     * @todo   Implement testVar_dump().
     */
    public function testVar_dump()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::zval_dump
     * @todo   Implement testZval_dump().
     */
    public function testZval_dump()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::backtrace
     * @todo   Implement testBacktrace().
     */
    public function testBacktrace()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::dump
     * @todo   Implement testDump().
     */
    public function testDump()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Csanquer\DebugTools\Debug::getCallInfos
     * @todo   Implement testGetCallInfos().
     */
    public function testGetCallInfos()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

class WithToString
{
    public function __toString()
    {
        return 'this class has __toString method';
    }
}

class WithoutToString
{
    
}