<?php

namespace Csanquer\DebugTools\Test\Output;

use Csanquer\DebugTools\Output\Cli;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-04-09 at 12:16:56.
 */
class CliTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Csanquer\DebugTools\Output\Cli
     */
    protected $output;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->output = new Cli();
    }

    /**
      public function testFormatBacktrace()
      {
      $dump = array(
      'name' => 'backtrace',
      'type' => 'backtrace',
      'composite' => true,
      'max_char' => 180,
      'value' => array(
      array(
      'function' => 'backtrace',
      'line' => 28,
      'file' => '/home/test/test.php',
      'class' => 'Csanquer\\DebugTools\\Dumper',
      'object' =>
      array(
      'type' => 'object',
      'composite' => true,
      'class' => 'Csanquer\\DebugTools\\Dumper',
      'properties' => array(),
      ),
      'type' => '->',
      ),
      array(
      'function' => 'test',
      'line' => 21,
      'file' => '/home/test/test.php',
      'class' => 'TestDump',
      'object' =>
      array(
      'type' => 'object',
      'composite' => true,
      'class' => 'TestDump',
      'properties' =>
      array(
      ),
      ),
      'type' => '->',
      'args' =>
      array(
      0 =>
      array(
      'type' => 'string',
      'value' => 'mike',
      'length' => 4,
      'max_length' => 180,
      'composite' => false,
      ),
      ),
      ),
      array(
      'function' => 'hello',
      'line' => 37,
      'file' => '/home/test/test.php',
      'class' => 'TestDump',
      'object' =>
      array(
      'type' => 'object',
      'composite' => true,
      'class' => 'TestDump',
      'properties' =>
      array(
      ),
      ),
      'type' => '->',
      'args' =>
      array(
      0 =>
      array(
      'type' => 'string',
      'value' => 'mike',
      'length' => 4,
      'max_length' => 180,
      'composite' => false,
      ),
      ),
      ),
      ),
      'call' => array(
      'file' => 'test.php',
      'line' => 5,
      ),
      );

      var_dump($this->output->format($dump));
      $sepLine = str_repeat('-', 80);
      $expected = '/\n-{80}\na\szval_dump\s=\sstring\(5\)\s"hello"\srefcount\(\d+\)\n\nCalled\sfrom\stest.php\son\sline\s5\n-{80}\n/';
      $this->assertRegExp($expected, '');
      }
      /* */
    public function testFormatZvalDump()
    {
        $dump = array(
            'name' => 'a zval_dump',
            'type' => 'zval_dump',
            'composite' => false,
            'value' => 'string(5) "hello" refcount(3)' . "\n",
            'call' => array(
                'file' => 'test.php',
                'line' => 5,
            ),
        );

        $sepLine = str_repeat('-', 80);
        $expected = '/\n-{80}\na\szval_dump\s=\sstring\(5\)\s"hello"\srefcount\(\d+\)\n\nCalled\sfrom\stest.php\son\sline\s5\n-{80}\n/';
        $this->assertRegExp($expected, $this->output->format($dump));
    }

    /**
     * @dataProvider formatProvider
     */
    public function testFormat($dump, $expected)
    {
        $this->assertEquals($expected, $this->output->format($dump));
    }

    public function formatProvider()
    {
        $sepLine = str_repeat('-', 80);
        $indent = str_repeat(' ', 4);

        return array(
            //null
            array(
                array(
                    'name' => 'a null',
                    'type' => 'NULL',
                    'composite' => false,
                    'value' => null,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na null = NULL\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //true
            array(
                array(
                    'name' => 'a true',
                    'type' => 'bool',
                    'composite' => false,
                    'value' => true,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na true = bool true\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //false
            array(
                array(
                    'name' => 'a false',
                    'type' => 'bool',
                    'composite' => false,
                    'value' => false,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na false = bool false\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //an integer
            array(
                array(
                    'name' => 'a integer',
                    'type' => 'int',
                    'composite' => false,
                    'value' => 2,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na integer = int 2\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //a float
            array(
                array(
                    'name' => 'a float',
                    'type' => 'float',
                    'composite' => false,
                    'value' => 2.1,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na float = float 2.1\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //a string
            array(
                array(
                    'name' => 'a string',
                    'type' => 'string',
                    'composite' => false,
                    'value' => 'hello',
                    'length' => 5,
                    'max_length' => null,
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na string = string (length = 5) 'hello'\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //a file resource
            array(
                array(
                    'name' => 'a custom resource dump',
                    'type' => 'resource',
                    'composite' => false,
                    'value' => '163',
                    'resource_type' => 'stream',
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na custom resource dump = Resource(163) of type stream\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            //an array
            array(
                array(
                    'name' => 'an array',
                    'type' => 'array',
                    'composite' => true,
                    'length' => 3,
                    'value' => array(
                        'a' =>
                        array(
                            'type' => 'int',
                            'value' => 1,
                            'composite' => false,
                        ),
                        'b' =>
                        array(
                            'type' => 'string',
                            'value' => 'hello',
                            'length' => 5,
                            'max_length' => null,
                            'composite' => false,
                        ),
                        0 => array(
                            'type' => 'array',
                            'composite' => true,
                            'value' =>
                            array(
                                'c' =>
                                array(
                                    'type' => 'array',
                                    'composite' => true,
                                    'value' =>
                                    array(
                                        0 =>
                                        array(
                                            'type' => 'array',
                                            'composite' => true,
                                            'value' =>
                                            array(
                                                2 =>
                                                array(
                                                    'type' => 'array',
                                                    'composite' => true,
                                                    'value' => '...',
                                                    'length' => 2,
                                                ),
                                            ),
                                            'length' => 1,
                                        ),
                                        'e' =>
                                        array(
                                            'type' => 'bool',
                                            'value' => true,
                                            'composite' => false,
                                        ),
                                    ),
                                    'length' => 2,
                                ),
                            ),
                            'length' => 1,
                        ),
                    ),
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\nan array = \narray (length = 3) {\n" . str_repeat($indent, 1) . "['a'] => int 1\n" . str_repeat($indent, 1) . "['b'] => string (length = 5) 'hello'\n" . str_repeat($indent, 1) . "[0] => array (length = 1) {\n" . str_repeat($indent, 2) . "['c'] => array (length = 2) {\n" . str_repeat($indent, 3) . "[0] => array (length = 1) {\n" . str_repeat($indent, 4) . "[2] => array (length = 2) ...\n" . str_repeat($indent, 3) . "}\n" . str_repeat($indent, 3) . "['e'] => bool true\n" . str_repeat($indent, 2) . "}\n" . str_repeat($indent, 1) . "}\n}\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // object with properties
            array(
                array(
                    'name' => 'an object',
                    'type' => 'object',
                    'composite' => true,
                    'class' => 'Csanquer\DebugTools\Test\TestDump',
                    'properties' => array(
                        'f' =>
                        array(
                            'name' => 'f',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => true,
                            'value' =>
                            array(
                                'type' => 'string',
                                'value' => 'static',
                                'length' => 6,
                                'max_length' => NULL,
                                'composite' => false,
                            ),
                        ),
                        'a' =>
                        array(
                            'name' => 'a',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'private',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'bool',
                                'value' => true,
                                'composite' => false,
                            ),
                        ),
                        'b' =>
                        array(
                            'name' => 'b',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'int',
                                'value' => 1,
                                'composite' => false,
                            ),
                        ),
                        'c' =>
                        array(
                            'name' => 'c',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'public',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'string',
                                'value' => 'hello',
                                'length' => 5,
                                'max_length' => NULL,
                                'composite' => false,
                            ),
                        ),
                        'd' =>
                        array(
                            'name' => 'd',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'private',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'array',
                                'composite' => true,
                                'value' =>
                                array(
                                    'e' =>
                                    array(
                                        'type' => 'int',
                                        'value' => 5,
                                        'composite' => false,
                                    ),
                                ),
                                'length' => 1,
                            ),
                        ),
                    ),
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\nan object = \nobject Csanquer\DebugTools\Test\TestDump {\n" . str_repeat($indent, 1) . "protected static 'f' string (length = 6) 'static'\n" . str_repeat($indent, 1) . "private 'a' bool true\n" . str_repeat($indent, 1) . "protected 'b' int 1\n" . str_repeat($indent, 1) . "public 'c' string (length = 5) 'hello'\n" . str_repeat($indent, 1) . "private 'd' array (length = 1) {\n" . str_repeat($indent, 2) . "['e'] => int 5\n" . str_repeat($indent, 1) . "}\n}\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // object without properties
            array(
                array(
                    'name' => 'an object',
                    'type' => 'object',
                    'composite' => true,
                    'class' => 'Csanquer\DebugTools\Test\TestDump',
                    'properties' => array(),
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\nan object = \nobject Csanquer\DebugTools\Test\TestDump {\n" . str_repeat($indent, 1) . "...\n}\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // var_export string
            array(
                array(
                    'name' => 'a var export',
                    'type' => 'var_export',
                    'composite' => false,
                    'value' => '\'hello\'',
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na var export = 'hello'\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // var_export array
            array(
                array(
                    'name' => 'a var export',
                    'type' => 'var_export',
                    'composite' => true,
                    'value' => "array (\n  0 => 2,\n  'a' => 'b',\n  1 => 'c',\n  'd' => 3,\n)",
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na var export = \narray (\n  0 => 2,\n  'a' => 'b',\n  1 => 'c',\n  'd' => 3,\n)\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // print_r
            array(
                array(
                    'name' => null,
                    'type' => 'print_r',
                    'composite' => false,
                    'value' => 'hello',
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\nhello\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // var dump
            array(
                array(
                    'name' => 'a var_dump',
                    'type' => 'var_dump',
                    'composite' => false,
                    'value' => "string(5) \"hello\"\n",
                    'call' => array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\na var_dump = string(5) \"hello\"\n\nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
            // Exception
            array(
                array(
                    'type' => 'exception',
                    'composite' => true,
                    'class' => 'ErrorException',
                    'properties' =>
                    array(
                        'message' =>
                        array(
                            'name' => 'message',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'string',
                                'value' => 'an error occured',
                                'length' => 16,
                                'max_length' => NULL,
                                'composite' => false,
                            ),
                        ),
                        'code' =>
                        array(
                            'name' => 'code',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'int',
                                'value' => 101,
                                'composite' => false,
                            ),
                        ),
                        'file' =>
                        array(
                            'name' => 'file',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'string',
                                'value' => '/home/test/testException.php',
                                'length' => 37,
                                'max_length' => NULL,
                                'composite' => false,
                            ),
                        ),
                        'line' =>
                        array(
                            'name' => 'line',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'int',
                                'value' => 9,
                                'composite' => false,
                            ),
                        ),
                        'severity' =>
                        array(
                            'name' => 'severity',
                            'type' => 'property',
                            'composite' => false,
                            'access' => 'protected',
                            'static' => false,
                            'value' =>
                            array(
                                'type' => 'int',
                                'value' => 1,
                                'composite' => false,
                            ),
                        ),
                        'trace' =>
                        array(
                            'type' => 'backtrace',
                            'composite' => true,
                            'max_char' => 180,
                            'value' =>
                            array(
                                0 =>
                                array(
                                    'function' => 'testDumpException',
                                    'line' => 13,
                                    'file' => '/home/test/testException.php',
                                ),
                            ),
                        ),
                        'previous' =>
                        array(
                            'type' => 'exception',
                            'composite' => true,
                            'class' => 'Exception',
                            'properties' =>
                            array(
                                'message' =>
                                array(
                                    'name' => 'message',
                                    'type' => 'property',
                                    'composite' => false,
                                    'access' => 'protected',
                                    'static' => false,
                                    'value' =>
                                    array(
                                        'type' => 'string',
                                        'value' => 'an exception',
                                        'length' => 12,
                                        'max_length' => NULL,
                                        'composite' => false,
                                    ),
                                ),
                                'string' =>
                                array(
                                    'name' => 'string',
                                    'type' => 'property',
                                    'composite' => false,
                                    'access' => 'private',
                                    'static' => false,
                                    'value' =>
                                    array(
                                        'type' => 'string',
                                        'value' => '',
                                        'length' => 0,
                                        'max_length' => NULL,
                                        'composite' => false,
                                    ),
                                ),
                                'code' =>
                                array(
                                    'name' => 'code',
                                    'type' => 'property',
                                    'composite' => false,
                                    'access' => 'protected',
                                    'static' => false,
                                    'value' =>
                                    array(
                                        'type' => 'int',
                                        'value' => 0,
                                        'composite' => false,
                                    ),
                                ),
                                'file' =>
                                array(
                                    'name' => 'file',
                                    'type' => 'property',
                                    'composite' => false,
                                    'access' => 'protected',
                                    'static' => false,
                                    'value' =>
                                    array(
                                        'type' => 'string',
                                        'value' => '/home/test/testException.php',
                                        'length' => 37,
                                        'max_length' => NULL,
                                        'composite' => false,
                                    ),
                                ),
                                'line' =>
                                array(
                                    'name' => 'line',
                                    'type' => 'property',
                                    'composite' => false,
                                    'access' => 'protected',
                                    'static' => false,
                                    'value' =>
                                    array(
                                        'type' => 'int',
                                        'value' => 9,
                                        'composite' => false,
                                    ),
                                ),
                            ),
                        ),
                    ),
                    'name' => 'an exception',
                    'call' =>
                    array(
                        'file' => 'test.php',
                        'line' => 5,
                    ),
                ),
                "\n" . $sepLine . "\nan exception = \nCalled from test.php on line 5\n" . $sepLine . "\n"
            ),
        );
    }

}
